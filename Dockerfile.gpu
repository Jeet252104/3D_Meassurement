# 3D Measurement System - GPU-Accelerated Dockerfile
# Base: CUDA 12.1 with Ubuntu 22.04


FROM nvidia/cuda:12.1.0-devel-ubuntu22.04

# Metadata
LABEL maintainer="3D Measurement Team"
LABEL description="GPU-accelerated 3D measurement system with COLMAP and Metric3D"
LABEL version="2.0.0"

# Prevent interactive prompts during build
ENV DEBIAN_FRONTEND=noninteractive

# Set environment variables for CUDA
ENV CUDA_HOME=/usr/local/cuda \
    PATH=/usr/local/cuda/bin:$PATH \
    LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Python
    python3.10 \
    python3-pip \
    python3-dev \
    # Build tools
    build-essential \
    cmake \
    git \
    wget \
    curl \
    ca-certificates \
    # COLMAP dependencies
    colmap \
    # OpenCV dependencies
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgeos-dev \
    # Image processing
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    # Cleanup
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set Python3 as default python
RUN ln -sf /usr/bin/python3.10 /usr/bin/python && \
    ln -sf /usr/bin/python3.10 /usr/bin/python3

# Upgrade pip, setuptools, and wheel
RUN python -m pip install --upgrade pip setuptools wheel

# Set working directory
WORKDIR /app

# Copy requirements files first (for better layer caching)
COPY requirements/base.txt requirements/gpu.txt ./requirements/

# Install Python dependencies in order (base first, then GPU)
RUN pip install --no-cache-dir -r requirements/base.txt && \
    pip install --no-cache-dir -r requirements/gpu.txt

# Copy application source code
COPY src/ ./src/
COPY configs/ ./configs/
COPY main.py ./main.py
COPY calibrate_scale.py ./calibrate_scale.py
COPY calibrate_depth_scale.py ./calibrate_depth_scale.py
COPY resize_images.py ./resize_images.py

# Create necessary directories
RUN mkdir -p /app/output \
    /app/logs \
    /app/data \
    /app/examples && \
    chmod -R 755 /app

# Make scripts executable
RUN chmod +x main.py calibrate_scale.py calibrate_depth_scale.py resize_images.py

# Expose API port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command: Start API server
CMD ["python", "main.py", "serve", "--host", "0.0.0.0", "--port", "8000"]
